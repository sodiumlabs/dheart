// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: proto/common/tss_message.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TssMessage_Type int32

const (
	TssMessage_UPDATE_MESSAGES TssMessage_Type = 0
	// A message sent from leader to everyone to check if anyone is available to participant
	// another optional (presign) tss work.
	TssMessage_AVAILABILITY_REQUEST TssMessage_Type = 1
	// A response from a node to the leader to indicate if it still has available resource for
	// another tss work. The leader can take a look at everyone's response to decide who are the
	// nodes to participate for tss work.
	//
	// For optional work (like presign), if a leader cannot find enough participants, it will cancel
	// the round. For required work (keygen, keysign, forced presign), the leader will forcefully
	// choose some online nodes (even though they say they are busy) for the work if the leader
	// cannot find enough candidates.
	TssMessage_AVAILABILITY_RESPONSE TssMessage_Type = 2
	// A message sent from leader to everyone else with a list of participants to a tss work.
	TssMessage_PRE_EXEC_OUTPUT TssMessage_Type = 3
	// When a party missed broadcast/unicast TSS messages, they ask them from peers
	TssMessage_ASK_MESSAGE_REQUEST TssMessage_Type = 4
)

// Enum value maps for TssMessage_Type.
var (
	TssMessage_Type_name = map[int32]string{
		0: "UPDATE_MESSAGES",
		1: "AVAILABILITY_REQUEST",
		2: "AVAILABILITY_RESPONSE",
		3: "PRE_EXEC_OUTPUT",
		4: "ASK_MESSAGE_REQUEST",
	}
	TssMessage_Type_value = map[string]int32{
		"UPDATE_MESSAGES":       0,
		"AVAILABILITY_REQUEST":  1,
		"AVAILABILITY_RESPONSE": 2,
		"PRE_EXEC_OUTPUT":       3,
		"ASK_MESSAGE_REQUEST":   4,
	}
)

func (x TssMessage_Type) Enum() *TssMessage_Type {
	p := new(TssMessage_Type)
	*p = x
	return p
}

func (x TssMessage_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TssMessage_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_common_tss_message_proto_enumTypes[0].Descriptor()
}

func (TssMessage_Type) Type() protoreflect.EnumType {
	return &file_proto_common_tss_message_proto_enumTypes[0]
}

func (x TssMessage_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TssMessage_Type.Descriptor instead.
func (TssMessage_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_common_tss_message_proto_rawDescGZIP(), []int{0, 0}
}

type AvailabilityResponseMessage_ANSWER int32

const (
	AvailabilityResponseMessage_YES AvailabilityResponseMessage_ANSWER = 0
	AvailabilityResponseMessage_NO  AvailabilityResponseMessage_ANSWER = 1
)

// Enum value maps for AvailabilityResponseMessage_ANSWER.
var (
	AvailabilityResponseMessage_ANSWER_name = map[int32]string{
		0: "YES",
		1: "NO",
	}
	AvailabilityResponseMessage_ANSWER_value = map[string]int32{
		"YES": 0,
		"NO":  1,
	}
)

func (x AvailabilityResponseMessage_ANSWER) Enum() *AvailabilityResponseMessage_ANSWER {
	p := new(AvailabilityResponseMessage_ANSWER)
	*p = x
	return p
}

func (x AvailabilityResponseMessage_ANSWER) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvailabilityResponseMessage_ANSWER) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_common_tss_message_proto_enumTypes[1].Descriptor()
}

func (AvailabilityResponseMessage_ANSWER) Type() protoreflect.EnumType {
	return &file_proto_common_tss_message_proto_enumTypes[1]
}

func (x AvailabilityResponseMessage_ANSWER) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvailabilityResponseMessage_ANSWER.Descriptor instead.
func (AvailabilityResponseMessage_ANSWER) EnumDescriptor() ([]byte, []int) {
	return file_proto_common_tss_message_proto_rawDescGZIP(), []int{2, 0}
}

type TssMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                        TssMessage_Type              `protobuf:"varint,1,opt,name=type,proto3,enum=common.TssMessage_Type" json:"type,omitempty"`
	From                        string                       `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To                          string                       `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	WorkId                      string                       `protobuf:"bytes,4,opt,name=workId,proto3" json:"workId,omitempty"`
	UpdateMessages              []*UpdateMessage             `protobuf:"bytes,5,rep,name=updateMessages,proto3" json:"updateMessages,omitempty"`
	AvailabilityResponseMessage *AvailabilityResponseMessage `protobuf:"bytes,6,opt,name=availabilityResponseMessage,proto3" json:"availabilityResponseMessage,omitempty"`
	PreExecOutputMessage        *PreExecOutputMessage        `protobuf:"bytes,7,opt,name=preExecOutputMessage,proto3" json:"preExecOutputMessage,omitempty"`
	AskRequestMessage           *AskRequestMessage           `protobuf:"bytes,8,opt,name=askRequestMessage,proto3" json:"askRequestMessage,omitempty"`
}

func (x *TssMessage) Reset() {
	*x = TssMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_tss_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TssMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TssMessage) ProtoMessage() {}

func (x *TssMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_tss_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TssMessage.ProtoReflect.Descriptor instead.
func (*TssMessage) Descriptor() ([]byte, []int) {
	return file_proto_common_tss_message_proto_rawDescGZIP(), []int{0}
}

func (x *TssMessage) GetType() TssMessage_Type {
	if x != nil {
		return x.Type
	}
	return TssMessage_UPDATE_MESSAGES
}

func (x *TssMessage) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TssMessage) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TssMessage) GetWorkId() string {
	if x != nil {
		return x.WorkId
	}
	return ""
}

func (x *TssMessage) GetUpdateMessages() []*UpdateMessage {
	if x != nil {
		return x.UpdateMessages
	}
	return nil
}

func (x *TssMessage) GetAvailabilityResponseMessage() *AvailabilityResponseMessage {
	if x != nil {
		return x.AvailabilityResponseMessage
	}
	return nil
}

func (x *TssMessage) GetPreExecOutputMessage() *PreExecOutputMessage {
	if x != nil {
		return x.PreExecOutputMessage
	}
	return nil
}

func (x *TssMessage) GetAskRequestMessage() *AskRequestMessage {
	if x != nil {
		return x.AskRequestMessage
	}
	return nil
}

type UpdateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data                     []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	SerializedMessageRouting []byte `protobuf:"bytes,2,opt,name=serializedMessageRouting,proto3" json:"serializedMessageRouting,omitempty"`
	Round                    string `protobuf:"bytes,3,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *UpdateMessage) Reset() {
	*x = UpdateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_tss_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMessage) ProtoMessage() {}

func (x *UpdateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_tss_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMessage.ProtoReflect.Descriptor instead.
func (*UpdateMessage) Descriptor() ([]byte, []int) {
	return file_proto_common_tss_message_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateMessage) GetSerializedMessageRouting() []byte {
	if x != nil {
		return x.SerializedMessageRouting
	}
	return nil
}

func (x *UpdateMessage) GetRound() string {
	if x != nil {
		return x.Round
	}
	return ""
}

// An answer from a party member to the leader to indicate its available for signing.
type AvailabilityResponseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answer AvailabilityResponseMessage_ANSWER `protobuf:"varint,1,opt,name=answer,proto3,enum=common.AvailabilityResponseMessage_ANSWER" json:"answer,omitempty"`
	MaxJob int32                              `protobuf:"varint,2,opt,name=maxJob,proto3" json:"maxJob,omitempty"`
}

func (x *AvailabilityResponseMessage) Reset() {
	*x = AvailabilityResponseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_tss_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailabilityResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailabilityResponseMessage) ProtoMessage() {}

func (x *AvailabilityResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_tss_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailabilityResponseMessage.ProtoReflect.Descriptor instead.
func (*AvailabilityResponseMessage) Descriptor() ([]byte, []int) {
	return file_proto_common_tss_message_proto_rawDescGZIP(), []int{2}
}

func (x *AvailabilityResponseMessage) GetAnswer() AvailabilityResponseMessage_ANSWER {
	if x != nil {
		return x.Answer
	}
	return AvailabilityResponseMessage_YES
}

func (x *AvailabilityResponseMessage) GetMaxJob() int32 {
	if x != nil {
		return x.MaxJob
	}
	return 0
}

// A message from a leader to send to everyone with a list of participants for a particular work
type PreExecOutputMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This value is true if there are enough participants for the tss work and false otherwise.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// List of participants that will join this tss work.
	Pids []string `protobuf:"bytes,2,rep,name=pids,proto3" json:"pids,omitempty"`
	// List of presign ids that will be used (only for signing)
	PresignIds []string `protobuf:"bytes,3,rep,name=presign_ids,json=presignIds,proto3" json:"presign_ids,omitempty"`
}

func (x *PreExecOutputMessage) Reset() {
	*x = PreExecOutputMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_tss_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreExecOutputMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreExecOutputMessage) ProtoMessage() {}

func (x *PreExecOutputMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_tss_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreExecOutputMessage.ProtoReflect.Descriptor instead.
func (*PreExecOutputMessage) Descriptor() ([]byte, []int) {
	return file_proto_common_tss_message_proto_rawDescGZIP(), []int{3}
}

func (x *PreExecOutputMessage) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PreExecOutputMessage) GetPids() []string {
	if x != nil {
		return x.Pids
	}
	return nil
}

func (x *PreExecOutputMessage) GetPresignIds() []string {
	if x != nil {
		return x.PresignIds
	}
	return nil
}

// If a party missed a TSS message then ask the peers
type AskRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgKey string `protobuf:"bytes,1,opt,name=msgKey,proto3" json:"msgKey,omitempty"`
}

func (x *AskRequestMessage) Reset() {
	*x = AskRequestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_tss_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskRequestMessage) ProtoMessage() {}

func (x *AskRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_tss_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskRequestMessage.ProtoReflect.Descriptor instead.
func (*AskRequestMessage) Descriptor() ([]byte, []int) {
	return file_proto_common_tss_message_proto_rawDescGZIP(), []int{4}
}

func (x *AskRequestMessage) GetMsgKey() string {
	if x != nil {
		return x.MsgKey
	}
	return ""
}

var File_proto_common_tss_message_proto protoreflect.FileDescriptor

var file_proto_common_tss_message_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74,
	0x73, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0xb6, 0x04, 0x0a, 0x0a, 0x54, 0x73, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x65, 0x0a, 0x1b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1b, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x14, 0x70, 0x72, 0x65, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x11,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x7e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x45, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x5f,
	0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x53, 0x4b, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x04, 0x22, 0x75, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x18, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x1b, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x4e,
	0x53, 0x57, 0x45, 0x52, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x61, 0x78, 0x4a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61,
	0x78, 0x4a, 0x6f, 0x62, 0x22, 0x19, 0x0a, 0x06, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x12, 0x07,
	0x0a, 0x03, 0x59, 0x45, 0x53, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x01, 0x22,
	0x65, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x69, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x2b, 0x0a, 0x11, 0x41, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x73, 0x67, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x73, 0x67,
	0x4b, 0x65, 0x79, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x69, 0x73, 0x75, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x64,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_common_tss_message_proto_rawDescOnce sync.Once
	file_proto_common_tss_message_proto_rawDescData = file_proto_common_tss_message_proto_rawDesc
)

func file_proto_common_tss_message_proto_rawDescGZIP() []byte {
	file_proto_common_tss_message_proto_rawDescOnce.Do(func() {
		file_proto_common_tss_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_common_tss_message_proto_rawDescData)
	})
	return file_proto_common_tss_message_proto_rawDescData
}

var file_proto_common_tss_message_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_common_tss_message_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_common_tss_message_proto_goTypes = []interface{}{
	(TssMessage_Type)(0),                    // 0: common.TssMessage.Type
	(AvailabilityResponseMessage_ANSWER)(0), // 1: common.AvailabilityResponseMessage.ANSWER
	(*TssMessage)(nil),                      // 2: common.TssMessage
	(*UpdateMessage)(nil),                   // 3: common.UpdateMessage
	(*AvailabilityResponseMessage)(nil),     // 4: common.AvailabilityResponseMessage
	(*PreExecOutputMessage)(nil),            // 5: common.PreExecOutputMessage
	(*AskRequestMessage)(nil),               // 6: common.AskRequestMessage
}
var file_proto_common_tss_message_proto_depIdxs = []int32{
	0, // 0: common.TssMessage.type:type_name -> common.TssMessage.Type
	3, // 1: common.TssMessage.updateMessages:type_name -> common.UpdateMessage
	4, // 2: common.TssMessage.availabilityResponseMessage:type_name -> common.AvailabilityResponseMessage
	5, // 3: common.TssMessage.preExecOutputMessage:type_name -> common.PreExecOutputMessage
	6, // 4: common.TssMessage.askRequestMessage:type_name -> common.AskRequestMessage
	1, // 5: common.AvailabilityResponseMessage.answer:type_name -> common.AvailabilityResponseMessage.ANSWER
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_proto_common_tss_message_proto_init() }
func file_proto_common_tss_message_proto_init() {
	if File_proto_common_tss_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_common_tss_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TssMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_tss_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_tss_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailabilityResponseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_tss_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreExecOutputMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_tss_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AskRequestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_common_tss_message_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_common_tss_message_proto_goTypes,
		DependencyIndexes: file_proto_common_tss_message_proto_depIdxs,
		EnumInfos:         file_proto_common_tss_message_proto_enumTypes,
		MessageInfos:      file_proto_common_tss_message_proto_msgTypes,
	}.Build()
	File_proto_common_tss_message_proto = out.File
	file_proto_common_tss_message_proto_rawDesc = nil
	file_proto_common_tss_message_proto_goTypes = nil
	file_proto_common_tss_message_proto_depIdxs = nil
}
